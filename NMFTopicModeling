import pandas as pd
df = pd.read_excel('')

!pip install stop_words
!pip install xlsxwriter

import xlsxwriter
from stop_words import get_stop_words

stoplist = get_stop_words('en')
toremove = ['music','applause']

def find_Topics(df,feature_text,n_topics,toremove):

    from sklearn.feature_extraction.text import TfidfVectorizer
    vett = TfidfVectorizer(ngram_range=(1,3),                    # chiediamo segmenti ripetuti fino a lunghezza 3
                           max_features = 1000,                  # n. massimo di parole da considerare
                           stop_words = stoplist+toremove,
                           min_df = 2,                           # frequenza minima di una forma grafica per essere considerata
                           max_df = 0.9,
                          #  tokenizer = mytokenizer
                           )


    # Per chiarezza, chiamiamo "V" la matrice Tf-idf
    V = vett.fit_transform(df[feature_text].astype(str))
    words = vett.get_feature_names_out()
    print(V.shape)

    from sklearn.decomposition import NMF
    model = NMF(n_components=n_topics,beta_loss='kullback-leibler', solver='mu', max_iter=1000, alpha_H=.1, l1_ratio=.5)

    # Model fit
    W = model.fit_transform(V)
    H = model.components_
    import pandas as pd
    word_topic_df = pd.DataFrame(H.T,index=words)
    document_topic_df = pd.DataFrame(W)
    document_topic_df["Topic"] = document_topic_df.idxmax(axis=1)

    sheet_1 = pd.concat([df,document_topic_df],axis=1)
    sheet_2 = word_topic_df

    # Create a Pandas Excel writer using XlsxWriter as the engine.
    writer = pd.ExcelWriter('NMF()_Results.xlsx', engine='xlsxwriter')

    # Write each dataframe to a different worksheet.
    sheet_1.to_excel(writer, sheet_name='documents')
    sheet_2.to_excel(writer, sheet_name='words')

    # Close the Pandas Excel writer and output the Excel file.
    writer.save()
    # return(word_topic_df,document_topic_df)


find_Topics(df,'captions',20,toremove)
